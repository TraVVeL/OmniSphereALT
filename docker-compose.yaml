services:
  database:
    image: mysql:8.0.41
    container_name: db_container
    env_file:
      - ./backend/.env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: mysqladmin ping -h localhost --user=root --password=${DB_PASSWORD}
      interval: 30s
      retries: 3
    networks:
      - omni_sphere_backend
    restart: always

  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    networks:
      - omni_sphere_backend
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_container
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - database
      - redis
    networks:
      - omni_sphere_backend
    restart: always

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery_worker_container
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
    depends_on:
      - database
      - redis
      - backend
    entrypoint: [ ]
    command: celery -A backend worker -l info --pool=solo
    networks:
      - omni_sphere_backend
    restart: always

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_container
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - omni_sphere_backend
    restart: always

  cloudpub:
    image: cloudpub/cloudpub:latest
    container_name: cloudpub
    command: run
    volumes:
      - cloudpub-config:/home/cloudpub
    network_mode: "host"
    environment:
      - TOKEN=${CLOUDPUB_TOKEN}
      - HTTP=8000,3000
    restart: always

networks:
  omni_sphere_backend:

volumes:
  db_data:
  cloudpub-config: